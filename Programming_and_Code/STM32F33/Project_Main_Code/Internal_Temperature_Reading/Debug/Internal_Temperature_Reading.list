
Internal_Temperature_Reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003700  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003888  08003888  00013888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038b8  080038b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080038b8  080038b8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038b8  080038b8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038b8  080038b8  000138b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080038c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          0000007c  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005d7b  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011ea  00000000  00000000  00025dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000520  00000000  00000000  00026fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000488  00000000  00000000  000274d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e64a  00000000  00000000  00027958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000702c  00000000  00000000  00045fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7ee7  00000000  00000000  0004cfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00104eb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001430  00000000  00000000  00104f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003870 	.word	0x08003870

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003870 	.word	0x08003870

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	0000      	movs	r0, r0
	...

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 f9da 	bl	8000dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a10:	f000 f860 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_ADC1_Init();
 8000a14:	f000 f8b8 	bl	8000b88 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//start the conversion
    HAL_ADC_Start(&hadc1);
 8000a18:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <main+0xb0>)
 8000a1a:	f000 fbef 	bl	80011fc <HAL_ADC_Start>

    //this is polling waits until a conversion is done
    if(HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8000a1e:	210a      	movs	r1, #10
 8000a20:	4825      	ldr	r0, [pc, #148]	; (8000ab8 <main+0xb0>)
 8000a22:	f000 fcd7 	bl	80013d4 <HAL_ADC_PollForConversion>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d13a      	bne.n	8000aa2 <main+0x9a>
    {
    	//will return the data stored inside the ADC data register
    	ADC_Value = HAL_ADC_GetValue(&hadc1);
 8000a2c:	4822      	ldr	r0, [pc, #136]	; (8000ab8 <main+0xb0>)
 8000a2e:	f000 fd9f 	bl	8001570 <HAL_ADC_GetValue>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <main+0xb4>)
 8000a36:	6013      	str	r3, [r2, #0]


    	//will store the conversion of digital number to the voltage
    	voltage_of_sensor = ((float)ADC_Value * 3.3)/4096;
 8000a38:	4b20      	ldr	r3, [pc, #128]	; (8000abc <main+0xb4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	ee07 3a90 	vmov	s15, r3
 8000a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a44:	ee17 0a90 	vmov	r0, s15
 8000a48:	f7ff fd22 	bl	8000490 <__aeabi_f2d>
 8000a4c:	a318      	add	r3, pc, #96	; (adr r3, 8000ab0 <main+0xa8>)
 8000a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a52:	f7ff fd75 	bl	8000540 <__aeabi_dmul>
 8000a56:	4602      	mov	r2, r0
 8000a58:	460b      	mov	r3, r1
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f04f 0200 	mov.w	r2, #0
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <main+0xb8>)
 8000a64:	f7ff fe96 	bl	8000794 <__aeabi_ddiv>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f7ff ff78 	bl	8000964 <__aeabi_d2f>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a13      	ldr	r2, [pc, #76]	; (8000ac4 <main+0xbc>)
 8000a78:	6013      	str	r3, [r2, #0]

    	//conversion of the voltage to temperature in celsius according to the manual of controller
    	temperature = ((voltage_at_25 - voltage_of_sensor)/avg_slope) + 25;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <main+0xc0>)
 8000a7c:	ed93 7a00 	vldr	s14, [r3]
 8000a80:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <main+0xbc>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <main+0xc4>)
 8000a8c:	ed93 7a00 	vldr	s14, [r3]
 8000a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a94:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000a98:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <main+0xc8>)
 8000a9e:	edc3 7a00 	vstr	s15, [r3]
    }

    //stop the conversion
    HAL_ADC_Stop(&hadc1);
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <main+0xb0>)
 8000aa4:	f000 fc60 	bl	8001368 <HAL_ADC_Stop>
    HAL_Delay(200);
 8000aa8:	20c8      	movs	r0, #200	; 0xc8
 8000aaa:	f000 f9f1 	bl	8000e90 <HAL_Delay>
    HAL_ADC_Start(&hadc1);
 8000aae:	e7b3      	b.n	8000a18 <main+0x10>
 8000ab0:	66666666 	.word	0x66666666
 8000ab4:	400a6666 	.word	0x400a6666
 8000ab8:	20000030 	.word	0x20000030
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	40b00000 	.word	0x40b00000
 8000ac4:	20000084 	.word	0x20000084
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000004 	.word	0x20000004
 8000ad0:	20000088 	.word	0x20000088

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	; 0x58
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ade:	2228      	movs	r2, #40	; 0x28
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 febc 	bl	8003860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af8:	463b      	mov	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b12:	2310      	movs	r3, #16
 8000b14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b16:	2302      	movs	r3, #2
 8000b18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b22:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f001 fb1b 	bl	8002164 <HAL_RCC_OscConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000b34:	f000 f898 	bl	8000c68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b38:	230f      	movs	r3, #15
 8000b3a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2101      	movs	r1, #1
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 fb43 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000b60:	f000 f882 	bl	8000c68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b6e:	463b      	mov	r3, r7
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fd1b 	bl	80035ac <HAL_RCCEx_PeriphCLKConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b7c:	f000 f874 	bl	8000c68 <Error_Handler>
  }
}
 8000b80:	bf00      	nop
 8000b82:	3758      	adds	r7, #88	; 0x58
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
 8000ba8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000baa:	4b2e      	ldr	r3, [pc, #184]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bb2:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b2a      	ldr	r3, [pc, #168]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b29      	ldr	r3, [pc, #164]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b27      	ldr	r3, [pc, #156]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b26      	ldr	r3, [pc, #152]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b24      	ldr	r3, [pc, #144]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bf8:	4b1a      	ldr	r3, [pc, #104]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c04:	4817      	ldr	r0, [pc, #92]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000c06:	f000 f967 	bl	8000ed8 <HAL_ADC_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000c10:	f000 f82a 	bl	8000c68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4811      	ldr	r0, [pc, #68]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000c20:	f000 ff74 	bl	8001b0c <HAL_ADCEx_MultiModeConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000c2a:	f000 f81d 	bl	8000c68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c2e:	2310      	movs	r3, #16
 8000c30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c32:	2301      	movs	r3, #1
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_ADC1_Init+0xdc>)
 8000c4c:	f000 fc9e 	bl	800158c <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c56:	f000 f807 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000030 	.word	0x20000030

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c7c:	699b      	ldr	r3, [r3, #24]
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6193      	str	r3, [r2, #24]
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a08      	ldr	r2, [pc, #32]	; (8000cb8 <HAL_MspInit+0x44>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_MspInit+0x44>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f001 fa26 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40021000 	.word	0x40021000

08000cbc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ccc:	d10b      	bne.n	8000ce6 <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_ADC_MspInit+0x38>)
 8000cd0:	695b      	ldr	r3, [r3, #20]
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_ADC_MspInit+0x38>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	6153      	str	r3, [r2, #20]
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_ADC_MspInit+0x38>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f884 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d74:	f7ff ffea 	bl	8000d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoopForever+0x6>)
  ldr r1, =_edata
 8000d7a:	490d      	ldr	r1, [pc, #52]	; (8000db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <LoopForever+0xe>)
  movs r3, #0
 8000d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d80:	e002      	b.n	8000d88 <LoopCopyDataInit>

08000d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d86:	3304      	adds	r3, #4

08000d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d8c:	d3f9      	bcc.n	8000d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8e:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d90:	4c0a      	ldr	r4, [pc, #40]	; (8000dbc <LoopForever+0x16>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d94:	e001      	b.n	8000d9a <LoopFillZerobss>

08000d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d98:	3204      	adds	r2, #4

08000d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d9c:	d3fb      	bcc.n	8000d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9e:	f002 fd3b 	bl	8003818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000da2:	f7ff fe31 	bl	8000a08 <main>

08000da6 <LoopForever>:

LoopForever:
    b LoopForever
 8000da6:	e7fe      	b.n	8000da6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000da8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000db4:	080038c0 	.word	0x080038c0
  ldr r2, =_sbss
 8000db8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dbc:	20000090 	.word	0x20000090

08000dc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc0:	e7fe      	b.n	8000dc0 <ADC1_2_IRQHandler>
	...

08000dc4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_Init+0x28>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_Init+0x28>)
 8000dce:	f043 0310 	orr.w	r3, r3, #16
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f001 f991 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff ff48 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40022000 	.word	0x40022000

08000df0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	; (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 f99b 	bl	800214a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f001 f971 	bl	8002112 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000010 	.word	0x20000010
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000010 	.word	0x20000010
 8000e74:	2000008c 	.word	0x2000008c

08000e78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2000008c 	.word	0x2000008c

08000e90 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b09a      	sub	sp, #104	; 0x68
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d101      	bne.n	8000ef8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e172      	b.n	80011de <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f003 0310 	and.w	r3, r3, #16
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d176      	bne.n	8000ff8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d152      	bne.n	8000fb8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f7ff fec5 	bl	8000cbc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d13b      	bne.n	8000fb8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f000 ff0d 	bl	8001d60 <ADC_Disable>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	f003 0310 	and.w	r3, r3, #16
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d12f      	bne.n	8000fb8 <HAL_ADC_Init+0xe0>
 8000f58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d12b      	bne.n	8000fb8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f68:	f023 0302 	bic.w	r3, r3, #2
 8000f6c:	f043 0202 	orr.w	r2, r3, #2
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f82:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f92:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f94:	4b94      	ldr	r3, [pc, #592]	; (80011e8 <HAL_ADC_Init+0x310>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a94      	ldr	r2, [pc, #592]	; (80011ec <HAL_ADC_Init+0x314>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9a      	lsrs	r2, r3, #18
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000faa:	e002      	b.n	8000fb2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f9      	bne.n	8000fac <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000fd4:	d110      	bne.n	8000ff8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f023 0312 	bic.w	r3, r3, #18
 8000fde:	f043 0210 	orr.w	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f043 0201 	orr.w	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 0310 	and.w	r3, r3, #16
 8001000:	2b00      	cmp	r3, #0
 8001002:	f040 80df 	bne.w	80011c4 <HAL_ADC_Init+0x2ec>
 8001006:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800100a:	2b00      	cmp	r3, #0
 800100c:	f040 80da 	bne.w	80011c4 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 80d2 	bne.w	80011c4 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001028:	f043 0202 	orr.w	r2, r3, #2
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001030:	4b6f      	ldr	r3, [pc, #444]	; (80011f0 <HAL_ADC_Init+0x318>)
 8001032:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800103c:	d102      	bne.n	8001044 <HAL_ADC_Init+0x16c>
 800103e:	4b6d      	ldr	r3, [pc, #436]	; (80011f4 <HAL_ADC_Init+0x31c>)
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e002      	b.n	800104a <HAL_ADC_Init+0x172>
 8001044:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001048:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b01      	cmp	r3, #1
 8001056:	d108      	bne.n	800106a <HAL_ADC_Init+0x192>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x192>
 8001066:	2301      	movs	r3, #1
 8001068:	e000      	b.n	800106c <HAL_ADC_Init+0x194>
 800106a:	2300      	movs	r3, #0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d11c      	bne.n	80010aa <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001070:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001072:	2b00      	cmp	r3, #0
 8001074:	d010      	beq.n	8001098 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	2b01      	cmp	r3, #1
 8001080:	d107      	bne.n	8001092 <HAL_ADC_Init+0x1ba>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_ADC_Init+0x1ba>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_ADC_Init+0x1bc>
 8001092:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001094:	2b00      	cmp	r3, #0
 8001096:	d108      	bne.n	80010aa <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010a8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	7e5b      	ldrb	r3, [r3, #25]
 80010ae:	035b      	lsls	r3, r3, #13
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010b4:	2a01      	cmp	r2, #1
 80010b6:	d002      	beq.n	80010be <HAL_ADC_Init+0x1e6>
 80010b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010bc:	e000      	b.n	80010c0 <HAL_ADC_Init+0x1e8>
 80010be:	2200      	movs	r2, #0
 80010c0:	431a      	orrs	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	431a      	orrs	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80010d0:	4313      	orrs	r3, r2
 80010d2:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d11b      	bne.n	8001116 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7e5b      	ldrb	r3, [r3, #25]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d109      	bne.n	80010fa <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	3b01      	subs	r3, #1
 80010ec:	045a      	lsls	r2, r3, #17
 80010ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010f0:	4313      	orrs	r3, r2
 80010f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f6:	663b      	str	r3, [r7, #96]	; 0x60
 80010f8:	e00d      	b.n	8001116 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001102:	f043 0220 	orr.w	r2, r3, #32
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	f043 0201 	orr.w	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111a:	2b01      	cmp	r3, #1
 800111c:	d007      	beq.n	800112e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001126:	4313      	orrs	r3, r2
 8001128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800112a:	4313      	orrs	r3, r2
 800112c:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 030c 	and.w	r3, r3, #12
 8001138:	2b00      	cmp	r3, #0
 800113a:	d114      	bne.n	8001166 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800114a:	f023 0302 	bic.w	r3, r3, #2
 800114e:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7e1b      	ldrb	r3, [r3, #24]
 8001154:	039a      	lsls	r2, r3, #14
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4313      	orrs	r3, r2
 8001160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001162:	4313      	orrs	r3, r2
 8001164:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_ADC_Init+0x320>)
 800116e:	4013      	ands	r3, r2
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001176:	430b      	orrs	r3, r1
 8001178:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10c      	bne.n	800119c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001188:	f023 010f 	bic.w	r1, r3, #15
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	631a      	str	r2, [r3, #48]	; 0x30
 800119a:	e007      	b.n	80011ac <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 020f 	bic.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f023 0303 	bic.w	r3, r3, #3
 80011ba:	f043 0201 	orr.w	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
 80011c2:	e00a      	b.n	80011da <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c8:	f023 0312 	bic.w	r3, r3, #18
 80011cc:	f043 0210 	orr.w	r2, r3, #16
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3768      	adds	r7, #104	; 0x68
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000008 	.word	0x20000008
 80011ec:	431bde83 	.word	0x431bde83
 80011f0:	50000300 	.word	0x50000300
 80011f4:	50000100 	.word	0x50000100
 80011f8:	fff0c007 	.word	0xfff0c007

080011fc <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 0304 	and.w	r3, r3, #4
 8001212:	2b00      	cmp	r3, #0
 8001214:	f040 809c 	bne.w	8001350 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121e:	2b01      	cmp	r3, #1
 8001220:	d101      	bne.n	8001226 <HAL_ADC_Start+0x2a>
 8001222:	2302      	movs	r3, #2
 8001224:	e097      	b.n	8001356 <HAL_ADC_Start+0x15a>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2201      	movs	r2, #1
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fd32 	bl	8001c98 <ADC_Enable>
 8001234:	4603      	mov	r3, r0
 8001236:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8083 	bne.w	8001346 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001248:	f023 0301 	bic.w	r3, r3, #1
 800124c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001254:	4b42      	ldr	r3, [pc, #264]	; (8001360 <HAL_ADC_Start+0x164>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_ADC_Start+0x6e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001268:	d115      	bne.n	8001296 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d027      	beq.n	80012d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800128c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001294:	e01e      	b.n	80012d4 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Start+0xba>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2c      	ldr	r2, [pc, #176]	; (8001364 <HAL_ADC_Start+0x168>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d10e      	bne.n	80012d4 <HAL_ADC_Start+0xd8>
 80012b6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012e0:	d106      	bne.n	80012f0 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	f023 0206 	bic.w	r2, r3, #6
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	221c      	movs	r2, #28
 8001304:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_ADC_Start+0x164>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 031f 	and.w	r3, r3, #31
 800130e:	2b00      	cmp	r3, #0
 8001310:	d010      	beq.n	8001334 <HAL_ADC_Start+0x138>
 8001312:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_ADC_Start+0x164>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	2b05      	cmp	r3, #5
 800131c:	d00a      	beq.n	8001334 <HAL_ADC_Start+0x138>
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_ADC_Start+0x164>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	2b09      	cmp	r3, #9
 8001328:	d004      	beq.n	8001334 <HAL_ADC_Start+0x138>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001332:	d10f      	bne.n	8001354 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689a      	ldr	r2, [r3, #8]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f042 0204 	orr.w	r2, r2, #4
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	e006      	b.n	8001354 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800134e:	e001      	b.n	8001354 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001350:	2302      	movs	r3, #2
 8001352:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001354:	7bfb      	ldrb	r3, [r7, #15]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	50000300 	.word	0x50000300
 8001364:	50000100 	.word	0x50000100

08001368 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_ADC_Stop+0x1a>
 800137e:	2302      	movs	r3, #2
 8001380:	e023      	b.n	80013ca <HAL_ADC_Stop+0x62>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800138a:	216c      	movs	r1, #108	; 0x6c
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 fd4d 	bl	8001e2c <ADC_ConversionStop>
 8001392:	4603      	mov	r3, r0
 8001394:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d111      	bne.n	80013c0 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fcdf 	bl	8001d60 <ADC_Disable>
 80013a2:	4603      	mov	r3, r0
 80013a4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d109      	bne.n	80013c0 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	f043 0201 	orr.w	r2, r3, #1
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d102      	bne.n	80013f0 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80013ea:	2308      	movs	r3, #8
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e02e      	b.n	800144e <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013f0:	4b5e      	ldr	r3, [pc, #376]	; (800156c <HAL_ADC_PollForConversion+0x198>)
 80013f2:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 031f 	and.w	r3, r3, #31
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d112      	bne.n	8001426 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b01      	cmp	r3, #1
 800140c:	d11d      	bne.n	800144a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f043 0220 	orr.w	r2, r3, #32
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e09d      	b.n	8001562 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f043 0220 	orr.w	r2, r3, #32
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e08b      	b.n	8001562 <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_ADC_PollForConversion+0x198>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 031f 	and.w	r3, r3, #31
 8001456:	2b00      	cmp	r3, #0
 8001458:	d004      	beq.n	8001464 <HAL_ADC_PollForConversion+0x90>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001462:	d104      	bne.n	800146e <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	613b      	str	r3, [r7, #16]
 800146c:	e003      	b.n	8001476 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800146e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001476:	f7ff fcff 	bl	8000e78 <HAL_GetTick>
 800147a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800147c:	e021      	b.n	80014c2 <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001484:	d01d      	beq.n	80014c2 <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d007      	beq.n	800149c <HAL_ADC_PollForConversion+0xc8>
 800148c:	f7ff fcf4 	bl	8000e78 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	429a      	cmp	r2, r3
 800149a:	d212      	bcs.n	80014c2 <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10b      	bne.n	80014c2 <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f043 0204 	orr.w	r2, r3, #4
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e04f      	b.n	8001562 <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0d6      	beq.n	800147e <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d131      	bne.n	800154e <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d12c      	bne.n	800154e <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d125      	bne.n	800154e <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	d112      	bne.n	8001536 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d112      	bne.n	800154e <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0201 	orr.w	r2, r3, #1
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
 8001534:	e00b      	b.n	800154e <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d103      	bne.n	8001560 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	50000300 	.word	0x50000300

08001570 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800158c:	b480      	push	{r7}
 800158e:	b09b      	sub	sp, #108	; 0x6c
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001596:	2300      	movs	r3, #0
 8001598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800159c:	2300      	movs	r3, #0
 800159e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_ADC_ConfigChannel+0x22>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e2a4      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x56c>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f040 8288 	bne.w	8001ad6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d81c      	bhi.n	8001608 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	4413      	add	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	461a      	mov	r2, r3
 80015e2:	231f      	movs	r3, #31
 80015e4:	4093      	lsls	r3, r2
 80015e6:	43db      	mvns	r3, r3
 80015e8:	4019      	ands	r1, r3
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa00 f203 	lsl.w	r2, r0, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	430a      	orrs	r2, r1
 8001604:	631a      	str	r2, [r3, #48]	; 0x30
 8001606:	e063      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d81e      	bhi.n	800164e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	3b1e      	subs	r3, #30
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	4019      	ands	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	4413      	add	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	3b1e      	subs	r3, #30
 8001640:	fa00 f203 	lsl.w	r2, r0, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
 800164c:	e040      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	2b0e      	cmp	r3, #14
 8001654:	d81e      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	3b3c      	subs	r3, #60	; 0x3c
 800166a:	221f      	movs	r2, #31
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	4019      	ands	r1, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	3b3c      	subs	r3, #60	; 0x3c
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	639a      	str	r2, [r3, #56]	; 0x38
 8001692:	e01d      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	3b5a      	subs	r3, #90	; 0x5a
 80016a8:	221f      	movs	r2, #31
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4019      	ands	r1, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	3b5a      	subs	r3, #90	; 0x5a
 80016c4:	fa00 f203 	lsl.w	r2, r0, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80e5 	bne.w	80018aa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b09      	cmp	r3, #9
 80016e6:	d91c      	bls.n	8001722 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6999      	ldr	r1, [r3, #24]
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	3b1e      	subs	r3, #30
 80016fa:	2207      	movs	r2, #7
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	4019      	ands	r1, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6898      	ldr	r0, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	3b1e      	subs	r3, #30
 8001714:	fa00 f203 	lsl.w	r2, r0, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	430a      	orrs	r2, r1
 800171e:	619a      	str	r2, [r3, #24]
 8001720:	e019      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6959      	ldr	r1, [r3, #20]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	4019      	ands	r1, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6898      	ldr	r0, [r3, #8]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	695a      	ldr	r2, [r3, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	3b01      	subs	r3, #1
 8001774:	2b03      	cmp	r3, #3
 8001776:	d84f      	bhi.n	8001818 <HAL_ADC_ConfigChannel+0x28c>
 8001778:	a201      	add	r2, pc, #4	; (adr r2, 8001780 <HAL_ADC_ConfigChannel+0x1f4>)
 800177a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177e:	bf00      	nop
 8001780:	08001791 	.word	0x08001791
 8001784:	080017b3 	.word	0x080017b3
 8001788:	080017d5 	.word	0x080017d5
 800178c:	080017f7 	.word	0x080017f7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001796:	4b94      	ldr	r3, [pc, #592]	; (80019e8 <HAL_ADC_ConfigChannel+0x45c>)
 8001798:	4013      	ands	r3, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	0691      	lsls	r1, r2, #26
 80017a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017a2:	430a      	orrs	r2, r1
 80017a4:	431a      	orrs	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017ae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017b0:	e07e      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017b8:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_ADC_ConfigChannel+0x45c>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	683a      	ldr	r2, [r7, #0]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	0691      	lsls	r1, r2, #26
 80017c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017c4:	430a      	orrs	r2, r1
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017d0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017d2:	e06d      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017da:	4b83      	ldr	r3, [pc, #524]	; (80019e8 <HAL_ADC_ConfigChannel+0x45c>)
 80017dc:	4013      	ands	r3, r2
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	0691      	lsls	r1, r2, #26
 80017e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80017e6:	430a      	orrs	r2, r1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80017f2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80017f4:	e05c      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017fc:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_ADC_ConfigChannel+0x45c>)
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	0691      	lsls	r1, r2, #26
 8001806:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001808:	430a      	orrs	r2, r1
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001814:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001816:	e04b      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800181e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	069b      	lsls	r3, r3, #26
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800183a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001842:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	069b      	lsls	r3, r3, #26
 800184c:	429a      	cmp	r2, r3
 800184e:	d107      	bne.n	8001860 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800185e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001866:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	069b      	lsls	r3, r3, #26
 8001870:	429a      	cmp	r2, r3
 8001872:	d107      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001882:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800188a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	069b      	lsls	r3, r3, #26
 8001894:	429a      	cmp	r2, r3
 8001896:	d10a      	bne.n	80018ae <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80018a8:	e001      	b.n	80018ae <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80018aa:	bf00      	nop
 80018ac:	e000      	b.n	80018b0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80018ae:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d108      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x344>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d101      	bne.n	80018d0 <HAL_ADC_ConfigChannel+0x344>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x346>
 80018d0:	2300      	movs	r3, #0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 810a 	bne.w	8001aec <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d00f      	beq.n	8001900 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2201      	movs	r2, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	400a      	ands	r2, r1
 80018fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80018fe:	e049      	b.n	8001994 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	409a      	lsls	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b09      	cmp	r3, #9
 8001920:	d91c      	bls.n	800195c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6999      	ldr	r1, [r3, #24]
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	3b1b      	subs	r3, #27
 8001934:	2207      	movs	r2, #7
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	4019      	ands	r1, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	6898      	ldr	r0, [r3, #8]
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4613      	mov	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4413      	add	r3, r2
 800194c:	3b1b      	subs	r3, #27
 800194e:	fa00 f203 	lsl.w	r2, r0, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	619a      	str	r2, [r3, #24]
 800195a:	e01b      	b.n	8001994 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6959      	ldr	r1, [r3, #20]
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	2207      	movs	r2, #7
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	4019      	ands	r1, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	6898      	ldr	r0, [r3, #8]
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	1c5a      	adds	r2, r3, #1
 8001982:	4613      	mov	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <HAL_ADC_ConfigChannel+0x460>)
 8001996:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b10      	cmp	r3, #16
 800199e:	d105      	bne.n	80019ac <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80019b0:	2b11      	cmp	r3, #17
 80019b2:	d105      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d00b      	beq.n	80019d8 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	f040 8091 	bne.w	8001aec <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80019ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f040 808a 	bne.w	8001aec <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019e0:	d108      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x468>
 80019e2:	4b03      	ldr	r3, [pc, #12]	; (80019f0 <HAL_ADC_ConfigChannel+0x464>)
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	e008      	b.n	80019fa <HAL_ADC_ConfigChannel+0x46e>
 80019e8:	83fff000 	.word	0x83fff000
 80019ec:	50000300 	.word	0x50000300
 80019f0:	50000100 	.word	0x50000100
 80019f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019f8:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d108      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x48e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x48e>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_ADC_ConfigChannel+0x490>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d150      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a20:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d010      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d107      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x4b6>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_ConfigChannel+0x4b6>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x4b8>
 8001a42:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d13c      	bne.n	8001ac2 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	d11d      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x500>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a58:	d118      	bne.n	8001a8c <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a64:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_ADC_ConfigChannel+0x578>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a27      	ldr	r2, [pc, #156]	; (8001b08 <HAL_ADC_ConfigChannel+0x57c>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a8a:	e02e      	b.n	8001aea <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b11      	cmp	r3, #17
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x520>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9c:	d106      	bne.n	8001aac <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001aa8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aaa:	e01e      	b.n	8001aea <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b12      	cmp	r3, #18
 8001ab2:	d11a      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001ab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001abe:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ac0:	e013      	b.n	8001aea <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ad4:	e00a      	b.n	8001aec <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f043 0220 	orr.w	r2, r3, #32
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ae8:	e000      	b.n	8001aec <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001aea:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001af4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	376c      	adds	r7, #108	; 0x6c
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000008 	.word	0x20000008
 8001b08:	431bde83 	.word	0x431bde83

08001b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b099      	sub	sp, #100	; 0x64
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b24:	d102      	bne.n	8001b2c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001b26:	4b5a      	ldr	r3, [pc, #360]	; (8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	e002      	b.n	8001b32 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001b2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b30:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0a2      	b.n	8001c82 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e09b      	b.n	8001c82 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d17f      	bne.n	8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0304 	and.w	r3, r3, #4
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d179      	bne.n	8001c60 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 8001b6e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d040      	beq.n	8001bfa <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	6859      	ldr	r1, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b8a:	035b      	lsls	r3, r3, #13
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b92:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0303 	and.w	r3, r3, #3
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d15c      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d107      	bne.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001bd6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d14b      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001bdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001be4:	f023 030f 	bic.w	r3, r3, #15
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	6811      	ldr	r1, [r2, #0]
 8001bec:	683a      	ldr	r2, [r7, #0]
 8001bee:	6892      	ldr	r2, [r2, #8]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bf8:	e03c      	b.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c04:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d108      	bne.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001c26:	2300      	movs	r3, #0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d123      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d107      	bne.n	8001c48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001c48:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d112      	bne.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c56:	f023 030f 	bic.w	r3, r3, #15
 8001c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c5c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c5e:	e009      	b.n	8001c74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0220 	orr.w	r2, r3, #32
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c72:	e000      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c74:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c82:	4618      	mov	r0, r3
 8001c84:	3764      	adds	r7, #100	; 0x64
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	50000100 	.word	0x50000100
 8001c94:	50000300 	.word	0x50000300

08001c98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <ADC_Enable+0x2c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <ADC_Enable+0x2c>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <ADC_Enable+0x2e>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d143      	bne.n	8001d52 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b22      	ldr	r3, [pc, #136]	; (8001d5c <ADC_Enable+0xc4>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00d      	beq.n	8001cf4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f043 0210 	orr.w	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f043 0201 	orr.w	r2, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e02f      	b.n	8001d54 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f042 0201 	orr.w	r2, r2, #1
 8001d02:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d04:	f7ff f8b8 	bl	8000e78 <HAL_GetTick>
 8001d08:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d0a:	e01b      	b.n	8001d44 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d0c:	f7ff f8b4 	bl	8000e78 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d914      	bls.n	8001d44 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d00d      	beq.n	8001d44 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f043 0210 	orr.w	r2, r3, #16
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	f043 0201 	orr.w	r2, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e007      	b.n	8001d54 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d1dc      	bne.n	8001d0c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	8000003f 	.word	0x8000003f

08001d60 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <ADC_Disable+0x2c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <ADC_Disable+0x2c>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <ADC_Disable+0x2e>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d047      	beq.n	8001e22 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 030d 	and.w	r3, r3, #13
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10f      	bne.n	8001dc0 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0202 	orr.w	r2, r2, #2
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2203      	movs	r2, #3
 8001db6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001db8:	f7ff f85e 	bl	8000e78 <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dbe:	e029      	b.n	8001e14 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	f043 0210 	orr.w	r2, r3, #16
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	f043 0201 	orr.w	r2, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e023      	b.n	8001e24 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ddc:	f7ff f84c 	bl	8000e78 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d914      	bls.n	8001e14 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d10d      	bne.n	8001e14 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f043 0210 	orr.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e007      	b.n	8001e24 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d0dc      	beq.n	8001ddc <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 030c 	and.w	r3, r3, #12
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 809b 	beq.w	8001f88 <ADC_ConversionStop+0x15c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e60:	d12a      	bne.n	8001eb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d126      	bne.n	8001eb8 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d122      	bne.n	8001eb8 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001e72:	230c      	movs	r3, #12
 8001e74:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001e76:	e014      	b.n	8001ea2 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <ADC_ConversionStop+0x168>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d90d      	bls.n	8001e9c <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0210 	orr.w	r2, r3, #16
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	f043 0201 	orr.w	r2, r3, #1
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e076      	b.n	8001f8a <ADC_ConversionStop+0x15e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eac:	2b40      	cmp	r3, #64	; 0x40
 8001eae:	d1e3      	bne.n	8001e78 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2b60      	cmp	r3, #96	; 0x60
 8001ebc:	d015      	beq.n	8001eea <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b04      	cmp	r3, #4
 8001eca:	d10e      	bne.n	8001eea <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d107      	bne.n	8001eea <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f042 0210 	orr.w	r2, r2, #16
 8001ee8:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d015      	beq.n	8001f1c <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d10e      	bne.n	8001f1c <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d107      	bne.n	8001f1c <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0220 	orr.w	r2, r2, #32
 8001f1a:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b60      	cmp	r3, #96	; 0x60
 8001f20:	d005      	beq.n	8001f2e <ADC_ConversionStop+0x102>
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b6c      	cmp	r3, #108	; 0x6c
 8001f26:	d105      	bne.n	8001f34 <ADC_ConversionStop+0x108>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001f28:	230c      	movs	r3, #12
 8001f2a:	617b      	str	r3, [r7, #20]
        break;
 8001f2c:	e005      	b.n	8001f3a <ADC_ConversionStop+0x10e>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	617b      	str	r3, [r7, #20]
        break;
 8001f32:	e002      	b.n	8001f3a <ADC_ConversionStop+0x10e>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001f34:	2304      	movs	r3, #4
 8001f36:	617b      	str	r3, [r7, #20]
        break;
 8001f38:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001f3a:	f7fe ff9d 	bl	8000e78 <HAL_GetTick>
 8001f3e:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001f40:	e01b      	b.n	8001f7a <ADC_ConversionStop+0x14e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001f42:	f7fe ff99 	bl	8000e78 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b0b      	cmp	r3, #11
 8001f4e:	d914      	bls.n	8001f7a <ADC_ConversionStop+0x14e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <ADC_ConversionStop+0x14e>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e007      	b.n	8001f8a <ADC_ConversionStop+0x15e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	4013      	ands	r3, r2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1dc      	bne.n	8001f42 <ADC_ConversionStop+0x116>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	000993ff 	.word	0x000993ff

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	6039      	str	r1, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200c:	2b00      	cmp	r3, #0
 800200e:	db0a      	blt.n	8002026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	b2da      	uxtb	r2, r3
 8002014:	490c      	ldr	r1, [pc, #48]	; (8002048 <__NVIC_SetPriority+0x4c>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	440b      	add	r3, r1
 8002020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002024:	e00a      	b.n	800203c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4908      	ldr	r1, [pc, #32]	; (800204c <__NVIC_SetPriority+0x50>)
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	3b04      	subs	r3, #4
 8002034:	0112      	lsls	r2, r2, #4
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	440b      	add	r3, r1
 800203a:	761a      	strb	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f003 0307 	and.w	r3, r3, #7
 8002062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f1c3 0307 	rsb	r3, r3, #7
 800206a:	2b04      	cmp	r3, #4
 800206c:	bf28      	it	cs
 800206e:	2304      	movcs	r3, #4
 8002070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3304      	adds	r3, #4
 8002076:	2b06      	cmp	r3, #6
 8002078:	d902      	bls.n	8002080 <NVIC_EncodePriority+0x30>
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b03      	subs	r3, #3
 800207e:	e000      	b.n	8002082 <NVIC_EncodePriority+0x32>
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	f04f 32ff 	mov.w	r2, #4294967295
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	401a      	ands	r2, r3
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002098:	f04f 31ff 	mov.w	r1, #4294967295
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa01 f303 	lsl.w	r3, r1, r3
 80020a2:	43d9      	mvns	r1, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a8:	4313      	orrs	r3, r2
         );
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3724      	adds	r7, #36	; 0x24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c8:	d301      	bcc.n	80020ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ca:	2301      	movs	r3, #1
 80020cc:	e00f      	b.n	80020ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <SysTick_Config+0x40>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020d6:	210f      	movs	r1, #15
 80020d8:	f04f 30ff 	mov.w	r0, #4294967295
 80020dc:	f7ff ff8e 	bl	8001ffc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020e0:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <SysTick_Config+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SysTick_Config+0x40>)
 80020e8:	2207      	movs	r2, #7
 80020ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	e000e010 	.word	0xe000e010

080020fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff47 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	4603      	mov	r3, r0
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002124:	f7ff ff5c 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 8002128:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	6978      	ldr	r0, [r7, #20]
 8002130:	f7ff ff8e 	bl	8002050 <NVIC_EncodePriority>
 8002134:	4602      	mov	r2, r0
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800213a:	4611      	mov	r1, r2
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff ff5d 	bl	8001ffc <__NVIC_SetPriority>
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ffb0 	bl	80020b8 <SysTick_Config>
 8002158:	4603      	mov	r3, r0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800216a:	af00      	add	r7, sp, #0
 800216c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002170:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002174:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002176:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800217a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	f001 b823 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 817d 	beq.w	800249a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80021a0:	4bbc      	ldr	r3, [pc, #752]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021ac:	4bb9      	ldr	r3, [pc, #740]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d15c      	bne.n	8002272 <HAL_RCC_OscConfig+0x10e>
 80021b8:	4bb6      	ldr	r3, [pc, #728]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c4:	d155      	bne.n	8002272 <HAL_RCC_OscConfig+0x10e>
 80021c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021de:	fab3 f383 	clz	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d102      	bne.n	80021f8 <HAL_RCC_OscConfig+0x94>
 80021f2:	4ba8      	ldr	r3, [pc, #672]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	e015      	b.n	8002224 <HAL_RCC_OscConfig+0xc0>
 80021f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800220c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002210:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002214:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002218:	fa93 f3a3 	rbit	r3, r3
 800221c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002220:	4b9c      	ldr	r3, [pc, #624]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002228:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800222c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002238:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800223c:	fab2 f282 	clz	r2, r2
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	f042 0220 	orr.w	r2, r2, #32
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	f002 021f 	and.w	r2, r2, #31
 800224c:	2101      	movs	r1, #1
 800224e:	fa01 f202 	lsl.w	r2, r1, r2
 8002252:	4013      	ands	r3, r2
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 811f 	beq.w	8002498 <HAL_RCC_OscConfig+0x334>
 800225a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800225e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 8116 	bne.w	8002498 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	f000 bfaf 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002282:	d106      	bne.n	8002292 <HAL_RCC_OscConfig+0x12e>
 8002284:	4b83      	ldr	r3, [pc, #524]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a82      	ldr	r2, [pc, #520]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228e:	6013      	str	r3, [r2, #0]
 8002290:	e036      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 8002292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002296:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x158>
 80022a2:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a7b      	ldr	r2, [pc, #492]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b79      	ldr	r3, [pc, #484]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a78      	ldr	r2, [pc, #480]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e021      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 80022bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x184>
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a70      	ldr	r2, [pc, #448]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6e      	ldr	r3, [pc, #440]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6d      	ldr	r2, [pc, #436]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x19c>
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a69      	ldr	r2, [pc, #420]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a66      	ldr	r2, [pc, #408]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002300:	4b64      	ldr	r3, [pc, #400]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002304:	f023 020f 	bic.w	r2, r3, #15
 8002308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800230c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	495f      	ldr	r1, [pc, #380]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002316:	4313      	orrs	r3, r2
 8002318:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800231a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800231e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d059      	beq.n	80023de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232a:	f7fe fda5 	bl	8000e78 <HAL_GetTick>
 800232e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe fda0 	bl	8000e78 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b64      	cmp	r3, #100	; 0x64
 8002342:	d902      	bls.n	800234a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	f000 bf43 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800235e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	095b      	lsrs	r3, r3, #5
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f043 0301 	orr.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x218>
 8002376:	4b47      	ldr	r3, [pc, #284]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	e015      	b.n	80023a8 <HAL_RCC_OscConfig+0x244>
 800237c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002380:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002390:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002394:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002398:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800239c:	fa93 f3a3 	rbit	r3, r3
 80023a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80023a4:	4b3b      	ldr	r3, [pc, #236]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80023b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80023b4:	fa92 f2a2 	rbit	r2, r2
 80023b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80023bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80023c0:	fab2 f282 	clz	r2, r2
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f042 0220 	orr.w	r2, r2, #32
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	f002 021f 	and.w	r2, r2, #31
 80023d0:	2101      	movs	r1, #1
 80023d2:	fa01 f202 	lsl.w	r2, r1, r2
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0ab      	beq.n	8002334 <HAL_RCC_OscConfig+0x1d0>
 80023dc:	e05d      	b.n	800249a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023de:	f7fe fd4b 	bl	8000e78 <HAL_GetTick>
 80023e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7fe fd46 	bl	8000e78 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b64      	cmp	r3, #100	; 0x64
 80023f6:	d902      	bls.n	80023fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	f000 bee9 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 80023fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002402:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002412:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	095b      	lsrs	r3, r3, #5
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d102      	bne.n	8002430 <HAL_RCC_OscConfig+0x2cc>
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e015      	b.n	800245c <HAL_RCC_OscConfig+0x2f8>
 8002430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002434:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002444:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002448:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800244c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002450:	fa93 f3a3 	rbit	r3, r3
 8002454:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002458:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_OscConfig+0x330>)
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002460:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002464:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002468:	fa92 f2a2 	rbit	r2, r2
 800246c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002470:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002474:	fab2 f282 	clz	r2, r2
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	f002 021f 	and.w	r2, r2, #31
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ab      	bne.n	80023e8 <HAL_RCC_OscConfig+0x284>
 8002490:	e003      	b.n	800249a <HAL_RCC_OscConfig+0x336>
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800249e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 817d 	beq.w	80027aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024b0:	4ba6      	ldr	r3, [pc, #664]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00b      	beq.n	80024d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024bc:	4ba3      	ldr	r3, [pc, #652]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f003 030c 	and.w	r3, r3, #12
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d172      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80024c8:	4ba0      	ldr	r3, [pc, #640]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d16c      	bne.n	80025ae <HAL_RCC_OscConfig+0x44a>
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80024e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	095b      	lsrs	r3, r3, #5
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_RCC_OscConfig+0x3a0>
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	e013      	b.n	800252c <HAL_RCC_OscConfig+0x3c8>
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002516:	2302      	movs	r3, #2
 8002518:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800251c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002520:	fa93 f3a3 	rbit	r3, r3
 8002524:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002528:	4b88      	ldr	r3, [pc, #544]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	2202      	movs	r2, #2
 800252e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002532:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800253e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002542:	fab2 f282 	clz	r2, r2
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	f042 0220 	orr.w	r2, r2, #32
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCC_OscConfig+0x410>
 800255e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002562:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d002      	beq.n	8002574 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	f000 be2e 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b75      	ldr	r3, [pc, #468]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002580:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	21f8      	movs	r1, #248	; 0xf8
 800258a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002592:	fa91 f1a1 	rbit	r1, r1
 8002596:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800259a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800259e:	fab1 f181 	clz	r1, r1
 80025a2:	b2c9      	uxtb	r1, r1
 80025a4:	408b      	lsls	r3, r1
 80025a6:	4969      	ldr	r1, [pc, #420]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ac:	e0fd      	b.n	80027aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 8088 	beq.w	80026d0 <HAL_RCC_OscConfig+0x56c>
 80025c0:	2301      	movs	r3, #1
 80025c2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80025ca:	fa93 f3a3 	rbit	r3, r3
 80025ce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80025d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	461a      	mov	r2, r3
 80025e8:	2301      	movs	r3, #1
 80025ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc44 	bl	8000e78 <HAL_GetTick>
 80025f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f6:	f7fe fc3f 	bl	8000e78 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d902      	bls.n	800260c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	f000 bde2 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800260c:	2302      	movs	r3, #2
 800260e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002616:	fa93 f3a3 	rbit	r3, r3
 800261a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800261e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	fab3 f383 	clz	r3, r3
 8002626:	b2db      	uxtb	r3, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d102      	bne.n	800263c <HAL_RCC_OscConfig+0x4d8>
 8002636:	4b45      	ldr	r3, [pc, #276]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	e013      	b.n	8002664 <HAL_RCC_OscConfig+0x500>
 800263c:	2302      	movs	r3, #2
 800263e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800264e:	2302      	movs	r3, #2
 8002650:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002654:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002658:	fa93 f3a3 	rbit	r3, r3
 800265c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002660:	4b3a      	ldr	r3, [pc, #232]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2202      	movs	r2, #2
 8002666:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800266a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800266e:	fa92 f2a2 	rbit	r2, r2
 8002672:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002676:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800267a:	fab2 f282 	clz	r2, r2
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	f042 0220 	orr.w	r2, r2, #32
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	f002 021f 	and.w	r2, r2, #31
 800268a:	2101      	movs	r1, #1
 800268c:	fa01 f202 	lsl.w	r2, r1, r2
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0af      	beq.n	80025f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b2d      	ldr	r3, [pc, #180]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	21f8      	movs	r1, #248	; 0xf8
 80026ac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026b4:	fa91 f1a1 	rbit	r1, r1
 80026b8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80026c0:	fab1 f181 	clz	r1, r1
 80026c4:	b2c9      	uxtb	r1, r1
 80026c6:	408b      	lsls	r3, r1
 80026c8:	4920      	ldr	r1, [pc, #128]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
 80026ce:	e06c      	b.n	80027aa <HAL_RCC_OscConfig+0x646>
 80026d0:	2301      	movs	r3, #1
 80026d2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80026e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026f0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	461a      	mov	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fbbc 	bl	8000e78 <HAL_GetTick>
 8002700:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002706:	f7fe fbb7 	bl	8000e78 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d902      	bls.n	800271c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	f000 bd5a 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800271c:	2302      	movs	r3, #2
 800271e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800272e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d104      	bne.n	8002750 <HAL_RCC_OscConfig+0x5ec>
 8002746:	4b01      	ldr	r3, [pc, #4]	; (800274c <HAL_RCC_OscConfig+0x5e8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	e015      	b.n	8002778 <HAL_RCC_OscConfig+0x614>
 800274c:	40021000 	.word	0x40021000
 8002750:	2302      	movs	r3, #2
 8002752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002762:	2302      	movs	r3, #2
 8002764:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002768:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800276c:	fa93 f3a3 	rbit	r3, r3
 8002770:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002774:	4bc8      	ldr	r3, [pc, #800]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002778:	2202      	movs	r2, #2
 800277a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800277e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002782:	fa92 f2a2 	rbit	r2, r2
 8002786:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800278a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800278e:	fab2 f282 	clz	r2, r2
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f042 0220 	orr.w	r2, r2, #32
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	f002 021f 	and.w	r2, r2, #31
 800279e:	2101      	movs	r1, #1
 80027a0:	fa01 f202 	lsl.w	r2, r1, r2
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ad      	bne.n	8002706 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	f000 8110 	beq.w	80029e0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d079      	beq.n	80028c4 <HAL_RCC_OscConfig+0x760>
 80027d0:	2301      	movs	r3, #1
 80027d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80027da:	fa93 f3a3 	rbit	r3, r3
 80027de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80027e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	fab3 f383 	clz	r3, r3
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4bab      	ldr	r3, [pc, #684]	; (8002a9c <HAL_RCC_OscConfig+0x938>)
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	461a      	mov	r2, r3
 80027f6:	2301      	movs	r3, #1
 80027f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fa:	f7fe fb3d 	bl	8000e78 <HAL_GetTick>
 80027fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002804:	f7fe fb38 	bl	8000e78 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d902      	bls.n	800281a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	f000 bcdb 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 800281a:	2302      	movs	r3, #2
 800281c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002824:	fa93 f3a3 	rbit	r3, r3
 8002828:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800282c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002830:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002834:	2202      	movs	r2, #2
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	fa93 f2a3 	rbit	r2, r3
 8002846:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002858:	2202      	movs	r2, #2
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	fa93 f2a3 	rbit	r2, r3
 800286a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002872:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002874:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002880:	2102      	movs	r1, #2
 8002882:	6019      	str	r1, [r3, #0]
 8002884:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002888:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	fa93 f1a3 	rbit	r1, r3
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800289a:	6019      	str	r1, [r3, #0]
  return result;
 800289c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	f003 031f 	and.w	r3, r3, #31
 80028b6:	2101      	movs	r1, #1
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0a0      	beq.n	8002804 <HAL_RCC_OscConfig+0x6a0>
 80028c2:	e08d      	b.n	80029e0 <HAL_RCC_OscConfig+0x87c>
 80028c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028cc:	2201      	movs	r2, #1
 80028ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	fa93 f2a3 	rbit	r2, r3
 80028de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028e6:	601a      	str	r2, [r3, #0]
  return result;
 80028e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80028f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_OscConfig+0x938>)
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	461a      	mov	r2, r3
 8002902:	2300      	movs	r3, #0
 8002904:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002906:	f7fe fab7 	bl	8000e78 <HAL_GetTick>
 800290a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7fe fab2 	bl	8000e78 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d902      	bls.n	8002926 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	f000 bc55 	b.w	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800292e:	2202      	movs	r2, #2
 8002930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002936:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	fa93 f2a3 	rbit	r2, r3
 8002940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002944:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800295a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	fa93 f2a3 	rbit	r2, r3
 8002964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002976:	2202      	movs	r2, #2
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800297e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002990:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800299e:	2102      	movs	r1, #2
 80029a0:	6019      	str	r1, [r3, #0]
 80029a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029a6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f1a3 	rbit	r1, r3
 80029b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029b8:	6019      	str	r1, [r3, #0]
  return result;
 80029ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fab3 f383 	clz	r3, r3
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d197      	bne.n	8002910 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 81a1 	beq.w	8002d38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029fc:	4b26      	ldr	r3, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d116      	bne.n	8002a36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	61d3      	str	r3, [r2, #28]
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002a2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002a30:	2301      	movs	r3, #1
 8002a32:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d11a      	bne.n	8002a78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a16      	ldr	r2, [pc, #88]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7fe fa13 	bl	8000e78 <HAL_GetTick>
 8002a52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a56:	e009      	b.n	8002a6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe fa0e 	bl	8000e78 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b64      	cmp	r3, #100	; 0x64
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e3b1      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x93c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10d      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x940>
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a02      	ldr	r2, [pc, #8]	; (8002a98 <HAL_RCC_OscConfig+0x934>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e03c      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	10908120 	.word	0x10908120
 8002aa0:	40007000 	.word	0x40007000
 8002aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_OscConfig+0x96a>
 8002ab4:	4bc1      	ldr	r3, [pc, #772]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4ac0      	ldr	r2, [pc, #768]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6213      	str	r3, [r2, #32]
 8002ac0:	4bbe      	ldr	r3, [pc, #760]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4abd      	ldr	r2, [pc, #756]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6213      	str	r3, [r2, #32]
 8002acc:	e020      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	2b05      	cmp	r3, #5
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0x994>
 8002ade:	4bb7      	ldr	r3, [pc, #732]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4ab6      	ldr	r2, [pc, #728]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002ae4:	f043 0304 	orr.w	r3, r3, #4
 8002ae8:	6213      	str	r3, [r2, #32]
 8002aea:	4bb4      	ldr	r3, [pc, #720]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4ab3      	ldr	r2, [pc, #716]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0x9ac>
 8002af8:	4bb0      	ldr	r3, [pc, #704]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4aaf      	ldr	r2, [pc, #700]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002afe:	f023 0301 	bic.w	r3, r3, #1
 8002b02:	6213      	str	r3, [r2, #32]
 8002b04:	4bad      	ldr	r3, [pc, #692]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4aac      	ldr	r2, [pc, #688]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002b0a:	f023 0304 	bic.w	r3, r3, #4
 8002b0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8081 	beq.w	8002c24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b22:	f7fe f9a9 	bl	8000e78 <HAL_GetTick>
 8002b26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe f9a4 	bl	8000e78 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e345      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b48:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b54:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	fa93 f2a3 	rbit	r2, r3
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b6c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b70:	2202      	movs	r2, #2
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b78:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	fa93 f2a3 	rbit	r2, r3
 8002b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b86:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b8a:	601a      	str	r2, [r3, #0]
  return result;
 8002b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b90:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d102      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xa4c>
 8002baa:	4b84      	ldr	r3, [pc, #528]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	e013      	b.n	8002bd8 <HAL_RCC_OscConfig+0xa74>
 8002bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bb8:	2202      	movs	r2, #2
 8002bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	fa93 f2a3 	rbit	r2, r3
 8002bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	4b79      	ldr	r3, [pc, #484]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bdc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002be0:	2102      	movs	r1, #2
 8002be2:	6011      	str	r1, [r2, #0]
 8002be4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002be8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002bec:	6812      	ldr	r2, [r2, #0]
 8002bee:	fa92 f1a2 	rbit	r1, r2
 8002bf2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002bf6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002bfa:	6011      	str	r1, [r2, #0]
  return result;
 8002bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c00:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	fab2 f282 	clz	r2, r2
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	f002 021f 	and.w	r2, r2, #31
 8002c16:	2101      	movs	r1, #1
 8002c18:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d084      	beq.n	8002b2c <HAL_RCC_OscConfig+0x9c8>
 8002c22:	e07f      	b.n	8002d24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7fe f928 	bl	8000e78 <HAL_GetTick>
 8002c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c2e:	f7fe f923 	bl	8000e78 <HAL_GetTick>
 8002c32:	4602      	mov	r2, r0
 8002c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e2c4      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c4e:	2202      	movs	r2, #2
 8002c50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c56:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	fa93 f2a3 	rbit	r2, r3
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c6e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c72:	2202      	movs	r2, #2
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	fa93 f2a3 	rbit	r2, r3
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c8c:	601a      	str	r2, [r3, #0]
  return result;
 8002c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c92:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	fab3 f383 	clz	r3, r3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	f043 0302 	orr.w	r3, r3, #2
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d102      	bne.n	8002cb2 <HAL_RCC_OscConfig+0xb4e>
 8002cac:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	e013      	b.n	8002cda <HAL_RCC_OscConfig+0xb76>
 8002cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cb6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cba:	2202      	movs	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	fa93 f2a3 	rbit	r2, r3
 8002ccc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	4b39      	ldr	r3, [pc, #228]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cde:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	6011      	str	r1, [r2, #0]
 8002ce6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	fa92 f1a2 	rbit	r1, r2
 8002cf4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002cf8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002cfc:	6011      	str	r1, [r2, #0]
  return result;
 8002cfe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d02:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	fab2 f282 	clz	r2, r2
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	f002 021f 	and.w	r2, r2, #31
 8002d18:	2101      	movs	r1, #1
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d184      	bne.n	8002c2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d24:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2c:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	4a22      	ldr	r2, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	f000 8242 	beq.w	80031ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4a:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_RCC_OscConfig+0xc58>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	f000 8213 	beq.w	800317e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f040 8162 	bne.w	800302e <HAL_RCC_OscConfig+0xeca>
 8002d6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	fa93 f2a3 	rbit	r2, r3
 8002d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d8e:	601a      	str	r2, [r3, #0]
  return result;
 8002d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d94:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9a:	fab3 f383 	clz	r3, r3
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	461a      	mov	r2, r3
 8002dac:	2300      	movs	r3, #0
 8002dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe f862 	bl	8000e78 <HAL_GetTick>
 8002db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002db8:	e00c      	b.n	8002dd4 <HAL_RCC_OscConfig+0xc70>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dc0:	f7fe f85a 	bl	8000e78 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e1fd      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002ddc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	fa93 f2a3 	rbit	r2, r3
 8002df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002df8:	601a      	str	r2, [r3, #0]
  return result;
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002e02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	095b      	lsrs	r3, r3, #5
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <HAL_RCC_OscConfig+0xcba>
 8002e18:	4bb0      	ldr	r3, [pc, #704]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	e027      	b.n	8002e6e <HAL_RCC_OscConfig+0xd0a>
 8002e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e22:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e30:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	fa93 f2a3 	rbit	r2, r3
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e56:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	fa93 f2a3 	rbit	r2, r3
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002e68:	601a      	str	r2, [r3, #0]
 8002e6a:	4b9c      	ldr	r3, [pc, #624]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e72:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e76:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e7a:	6011      	str	r1, [r2, #0]
 8002e7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e80:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002e84:	6812      	ldr	r2, [r2, #0]
 8002e86:	fa92 f1a2 	rbit	r1, r2
 8002e8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e92:	6011      	str	r1, [r2, #0]
  return result;
 8002e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e98:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	fab2 f282 	clz	r2, r2
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	f042 0220 	orr.w	r2, r2, #32
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f002 021f 	and.w	r2, r2, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d182      	bne.n	8002dc0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eba:	4b88      	ldr	r3, [pc, #544]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	430b      	orrs	r3, r1
 8002edc:	497f      	ldr	r1, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	604b      	str	r3, [r1, #4]
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	fa93 f2a3 	rbit	r2, r3
 8002efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f02:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f06:	601a      	str	r2, [r3, #0]
  return result;
 8002f08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002f10:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f12:	fab3 f383 	clz	r3, r3
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f1c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	461a      	mov	r2, r3
 8002f24:	2301      	movs	r3, #1
 8002f26:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f28:	f7fd ffa6 	bl	8000e78 <HAL_GetTick>
 8002f2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f30:	e009      	b.n	8002f46 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fd ffa1 	bl	8000e78 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e144      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f58:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	fa93 f2a3 	rbit	r2, r3
 8002f62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f66:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f6a:	601a      	str	r2, [r3, #0]
  return result;
 8002f6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f70:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d102      	bne.n	8002f90 <HAL_RCC_OscConfig+0xe2c>
 8002f8a:	4b54      	ldr	r3, [pc, #336]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	e027      	b.n	8002fe0 <HAL_RCC_OscConfig+0xe7c>
 8002f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	fa93 f2a3 	rbit	r2, r3
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	fa93 f2a3 	rbit	r2, r3
 8002fd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fd6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	4b3f      	ldr	r3, [pc, #252]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002fe8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fec:	6011      	str	r1, [r2, #0]
 8002fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fa92 f1a2 	rbit	r1, r2
 8002ffc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003000:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003004:	6011      	str	r1, [r2, #0]
  return result;
 8003006:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800300a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	fab2 f282 	clz	r2, r2
 8003014:	b2d2      	uxtb	r2, r2
 8003016:	f042 0220 	orr.w	r2, r2, #32
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	f002 021f 	and.w	r2, r2, #31
 8003020:	2101      	movs	r1, #1
 8003022:	fa01 f202 	lsl.w	r2, r1, r2
 8003026:	4013      	ands	r3, r2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d082      	beq.n	8002f32 <HAL_RCC_OscConfig+0xdce>
 800302c:	e0cf      	b.n	80031ce <HAL_RCC_OscConfig+0x106a>
 800302e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003032:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003036:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800303a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003040:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	fa93 f2a3 	rbit	r2, r3
 800304a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800304e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003052:	601a      	str	r2, [r3, #0]
  return result;
 8003054:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003058:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800305c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003068:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	461a      	mov	r2, r3
 8003070:	2300      	movs	r3, #0
 8003072:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fd ff00 	bl	8000e78 <HAL_GetTick>
 8003078:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307c:	e009      	b.n	8003092 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307e:	f7fd fefb 	bl	8000e78 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e09e      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
 8003092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003096:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800309a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800309e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	fa93 f2a3 	rbit	r2, r3
 80030ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030b6:	601a      	str	r2, [r3, #0]
  return result;
 80030b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80030c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	095b      	lsrs	r3, r3, #5
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d104      	bne.n	80030e0 <HAL_RCC_OscConfig+0xf7c>
 80030d6:	4b01      	ldr	r3, [pc, #4]	; (80030dc <HAL_RCC_OscConfig+0xf78>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	e029      	b.n	8003130 <HAL_RCC_OscConfig+0xfcc>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	fa93 f2a3 	rbit	r2, r3
 80030fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003100:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800310e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_OscConfig+0x1078>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003134:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003138:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800313c:	6011      	str	r1, [r2, #0]
 800313e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003142:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	fa92 f1a2 	rbit	r1, r2
 800314c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003150:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003154:	6011      	str	r1, [r2, #0]
  return result;
 8003156:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800315a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	fab2 f282 	clz	r2, r2
 8003164:	b2d2      	uxtb	r2, r2
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	f002 021f 	and.w	r2, r2, #31
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d180      	bne.n	800307e <HAL_RCC_OscConfig+0xf1a>
 800317c:	e027      	b.n	80031ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e01e      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_OscConfig+0x1078>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800319a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800319e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80031a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d10b      	bne.n	80031ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80031b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80031b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b09e      	sub	sp, #120	; 0x78
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e162      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b90      	ldr	r3, [pc, #576]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d910      	bls.n	8003228 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b8d      	ldr	r3, [pc, #564]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 0207 	bic.w	r2, r3, #7
 800320e:	498b      	ldr	r1, [pc, #556]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	4b89      	ldr	r3, [pc, #548]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e14a      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b82      	ldr	r3, [pc, #520]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	497f      	ldr	r1, [pc, #508]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 80dc 	beq.w	800340c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d13c      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xf6>
 800325c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800326a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
 8003272:	095b      	lsrs	r3, r3, #5
 8003274:	b2db      	uxtb	r3, r3
 8003276:	f043 0301 	orr.w	r3, r3, #1
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	d102      	bne.n	8003286 <HAL_RCC_ClockConfig+0xa6>
 8003280:	4b6f      	ldr	r3, [pc, #444]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	e00f      	b.n	80032a6 <HAL_RCC_ClockConfig+0xc6>
 8003286:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800328a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	667b      	str	r3, [r7, #100]	; 0x64
 8003294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003298:	663b      	str	r3, [r7, #96]	; 0x60
 800329a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800329c:	fa93 f3a3 	rbit	r3, r3
 80032a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a2:	4b67      	ldr	r3, [pc, #412]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80032ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032ae:	fa92 f2a2 	rbit	r2, r2
 80032b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80032b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f042 0220 	orr.w	r2, r2, #32
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f002 021f 	and.w	r2, r2, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d17b      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0f3      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d13c      	bne.n	8003358 <HAL_RCC_ClockConfig+0x178>
 80032de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80032ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ee:	fab3 f383 	clz	r3, r3
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d102      	bne.n	8003308 <HAL_RCC_ClockConfig+0x128>
 8003302:	4b4f      	ldr	r3, [pc, #316]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	e00f      	b.n	8003328 <HAL_RCC_ClockConfig+0x148>
 8003308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
 8003316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331a:	643b      	str	r3, [r7, #64]	; 0x40
 800331c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003324:	4b46      	ldr	r3, [pc, #280]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800332c:	63ba      	str	r2, [r7, #56]	; 0x38
 800332e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003330:	fa92 f2a2 	rbit	r2, r2
 8003334:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003338:	fab2 f282 	clz	r2, r2
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	f042 0220 	orr.w	r2, r2, #32
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	f002 021f 	and.w	r2, r2, #31
 8003348:	2101      	movs	r1, #1
 800334a:	fa01 f202 	lsl.w	r2, r1, r2
 800334e:	4013      	ands	r3, r2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d13a      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e0b2      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
 8003358:	2302      	movs	r3, #2
 800335a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	fa93 f3a3 	rbit	r3, r3
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_ClockConfig+0x1a0>
 800337a:	4b31      	ldr	r3, [pc, #196]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e00d      	b.n	800339c <HAL_RCC_ClockConfig+0x1bc>
 8003380:	2302      	movs	r3, #2
 8003382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	fa93 f3a3 	rbit	r3, r3
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	2302      	movs	r3, #2
 800338e:	623b      	str	r3, [r7, #32]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	4b29      	ldr	r3, [pc, #164]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2202      	movs	r2, #2
 800339e:	61ba      	str	r2, [r7, #24]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	fa92 f2a2 	rbit	r2, r2
 80033a6:	617a      	str	r2, [r7, #20]
  return result;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	fab2 f282 	clz	r2, r2
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	f042 0220 	orr.w	r2, r2, #32
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	f002 021f 	and.w	r2, r2, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f202 	lsl.w	r2, r1, r2
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e079      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ca:	4b1d      	ldr	r3, [pc, #116]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f023 0203 	bic.w	r2, r3, #3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	491a      	ldr	r1, [pc, #104]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033dc:	f7fd fd4c 	bl	8000e78 <HAL_GetTick>
 80033e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e4:	f7fd fd48 	bl	8000e78 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e061      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <HAL_RCC_ClockConfig+0x260>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 020c 	and.w	r2, r3, #12
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	429a      	cmp	r2, r3
 800340a:	d1eb      	bne.n	80033e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	429a      	cmp	r2, r3
 8003418:	d214      	bcs.n	8003444 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 0207 	bic.w	r2, r3, #7
 8003422:	4906      	ldr	r1, [pc, #24]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4313      	orrs	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <HAL_RCC_ClockConfig+0x25c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	429a      	cmp	r2, r3
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e040      	b.n	80034be <HAL_RCC_ClockConfig+0x2de>
 800343c:	40022000 	.word	0x40022000
 8003440:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003450:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	491a      	ldr	r1, [pc, #104]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800345e:	4313      	orrs	r3, r2
 8003460:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800346e:	4b16      	ldr	r3, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4912      	ldr	r1, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003482:	f000 f829 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003486:	4601      	mov	r1, r0
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <HAL_RCC_ClockConfig+0x2e8>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003490:	22f0      	movs	r2, #240	; 0xf0
 8003492:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	fa92 f2a2 	rbit	r2, r2
 800349a:	60fa      	str	r2, [r7, #12]
  return result;
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	fab2 f282 	clz	r2, r2
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	40d3      	lsrs	r3, r2
 80034a6:	4a09      	ldr	r2, [pc, #36]	; (80034cc <HAL_RCC_ClockConfig+0x2ec>)
 80034a8:	5cd3      	ldrb	r3, [r2, r3]
 80034aa:	fa21 f303 	lsr.w	r3, r1, r3
 80034ae:	4a08      	ldr	r2, [pc, #32]	; (80034d0 <HAL_RCC_ClockConfig+0x2f0>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <HAL_RCC_ClockConfig+0x2f4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd fc9a 	bl	8000df0 <HAL_InitTick>
  
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3778      	adds	r7, #120	; 0x78
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08003888 	.word	0x08003888
 80034d0:	20000008 	.word	0x20000008
 80034d4:	2000000c 	.word	0x2000000c

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	2300      	movs	r3, #0
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80034f2:	4b29      	ldr	r3, [pc, #164]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x30>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x36>
 8003506:	e03c      	b.n	8003582 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 800350a:	623b      	str	r3, [r7, #32]
      break;
 800350c:	e03c      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003514:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003518:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	fa92 f2a2 	rbit	r2, r2
 8003520:	607a      	str	r2, [r7, #4]
  return result;
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	fab2 f282 	clz	r2, r2
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	40d3      	lsrs	r3, r2
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800352e:	5cd3      	ldrb	r3, [r2, r3]
 8003530:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003532:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f003 030f 	and.w	r3, r3, #15
 800353a:	220f      	movs	r2, #15
 800353c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	60fa      	str	r2, [r7, #12]
  return result;
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a14      	ldr	r2, [pc, #80]	; (80035a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003560:	4a0e      	ldr	r2, [pc, #56]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	fbb2 f2f3 	udiv	r2, r2, r3
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
 8003570:	e004      	b.n	800357c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	623b      	str	r3, [r7, #32]
      break;
 8003580:	e002      	b.n	8003588 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003584:	623b      	str	r3, [r7, #32]
      break;
 8003586:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003588:	6a3b      	ldr	r3, [r7, #32]
}
 800358a:	4618      	mov	r0, r3
 800358c:	372c      	adds	r7, #44	; 0x2c
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	007a1200 	.word	0x007a1200
 80035a0:	08003898 	.word	0x08003898
 80035a4:	080038a8 	.word	0x080038a8
 80035a8:	003d0900 	.word	0x003d0900

080035ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b092      	sub	sp, #72	; 0x48
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035b4:	2300      	movs	r3, #0
 80035b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80cd 	beq.w	800376a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d0:	4b8e      	ldr	r3, [pc, #568]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10e      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035dc:	4b8b      	ldr	r3, [pc, #556]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4a8a      	ldr	r2, [pc, #552]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e6:	61d3      	str	r3, [r2, #28]
 80035e8:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	69db      	ldr	r3, [r3, #28]
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f4:	2301      	movs	r3, #1
 80035f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003602:	2b00      	cmp	r3, #0
 8003604:	d118      	bne.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a81      	ldr	r2, [pc, #516]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003612:	f7fd fc31 	bl	8000e78 <HAL_GetTick>
 8003616:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003618:	e008      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361a:	f7fd fc2d 	bl	8000e78 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b64      	cmp	r3, #100	; 0x64
 8003626:	d901      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e0ea      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362c:	4b78      	ldr	r3, [pc, #480]	; (8003810 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f0      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003638:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003640:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003644:	2b00      	cmp	r3, #0
 8003646:	d07d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003652:	429a      	cmp	r2, r3
 8003654:	d076      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003656:	4b6d      	ldr	r3, [pc, #436]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003664:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003670:	fab3 f383 	clz	r3, r3
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	4b66      	ldr	r3, [pc, #408]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	461a      	mov	r2, r3
 8003680:	2301      	movs	r3, #1
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003688:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	461a      	mov	r2, r3
 800369c:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
 80036a4:	2300      	movs	r3, #0
 80036a6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036a8:	4a58      	ldr	r2, [pc, #352]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d045      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fbde 	bl	8000e78 <HAL_GetTick>
 80036bc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	e00a      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fd fbda 	bl	8000e78 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e095      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x256>
 80036d6:	2302      	movs	r3, #2
 80036d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	fa93 f3a3 	rbit	r3, r3
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	2302      	movs	r3, #2
 80036e4:	623b      	str	r3, [r7, #32]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	61fb      	str	r3, [r7, #28]
  return result;
 80036ee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d102      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	e007      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800370a:	2302      	movs	r3, #2
 800370c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	fa93 f3a3 	rbit	r3, r3
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	4b3d      	ldr	r3, [pc, #244]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2202      	movs	r2, #2
 800371c:	613a      	str	r2, [r7, #16]
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	fa92 f2a2 	rbit	r2, r2
 8003724:	60fa      	str	r2, [r7, #12]
  return result;
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	fab2 f282 	clz	r2, r2
 800372c:	b2d2      	uxtb	r2, r2
 800372e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	f002 021f 	and.w	r2, r2, #31
 8003738:	2101      	movs	r1, #1
 800373a:	fa01 f202 	lsl.w	r2, r1, r2
 800373e:	4013      	ands	r3, r2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d0bd      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003744:	4b31      	ldr	r3, [pc, #196]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	492e      	ldr	r1, [pc, #184]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003752:	4313      	orrs	r3, r2
 8003754:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003756:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b2b      	ldr	r3, [pc, #172]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003776:	4b25      	ldr	r3, [pc, #148]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f023 0203 	bic.w	r2, r3, #3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	4922      	ldr	r1, [pc, #136]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003784:	4313      	orrs	r3, r2
 8003786:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003794:	4b1d      	ldr	r3, [pc, #116]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 0210 	bic.w	r2, r3, #16
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	491a      	ldr	r1, [pc, #104]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	4913      	ldr	r1, [pc, #76]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80037d0:	4b0e      	ldr	r3, [pc, #56]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	490b      	ldr	r1, [pc, #44]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037ee:	4b07      	ldr	r3, [pc, #28]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3748      	adds	r7, #72	; 0x48
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	10908100 	.word	0x10908100

08003818 <__libc_init_array>:
 8003818:	b570      	push	{r4, r5, r6, lr}
 800381a:	4d0d      	ldr	r5, [pc, #52]	; (8003850 <__libc_init_array+0x38>)
 800381c:	4c0d      	ldr	r4, [pc, #52]	; (8003854 <__libc_init_array+0x3c>)
 800381e:	1b64      	subs	r4, r4, r5
 8003820:	10a4      	asrs	r4, r4, #2
 8003822:	2600      	movs	r6, #0
 8003824:	42a6      	cmp	r6, r4
 8003826:	d109      	bne.n	800383c <__libc_init_array+0x24>
 8003828:	4d0b      	ldr	r5, [pc, #44]	; (8003858 <__libc_init_array+0x40>)
 800382a:	4c0c      	ldr	r4, [pc, #48]	; (800385c <__libc_init_array+0x44>)
 800382c:	f000 f820 	bl	8003870 <_init>
 8003830:	1b64      	subs	r4, r4, r5
 8003832:	10a4      	asrs	r4, r4, #2
 8003834:	2600      	movs	r6, #0
 8003836:	42a6      	cmp	r6, r4
 8003838:	d105      	bne.n	8003846 <__libc_init_array+0x2e>
 800383a:	bd70      	pop	{r4, r5, r6, pc}
 800383c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003840:	4798      	blx	r3
 8003842:	3601      	adds	r6, #1
 8003844:	e7ee      	b.n	8003824 <__libc_init_array+0xc>
 8003846:	f855 3b04 	ldr.w	r3, [r5], #4
 800384a:	4798      	blx	r3
 800384c:	3601      	adds	r6, #1
 800384e:	e7f2      	b.n	8003836 <__libc_init_array+0x1e>
 8003850:	080038b8 	.word	0x080038b8
 8003854:	080038b8 	.word	0x080038b8
 8003858:	080038b8 	.word	0x080038b8
 800385c:	080038bc 	.word	0x080038bc

08003860 <memset>:
 8003860:	4402      	add	r2, r0
 8003862:	4603      	mov	r3, r0
 8003864:	4293      	cmp	r3, r2
 8003866:	d100      	bne.n	800386a <memset+0xa>
 8003868:	4770      	bx	lr
 800386a:	f803 1b01 	strb.w	r1, [r3], #1
 800386e:	e7f9      	b.n	8003864 <memset+0x4>

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	bf00      	nop
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	bf00      	nop
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
